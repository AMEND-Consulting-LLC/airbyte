#!/usr/bin/env bash

# ------------- Import some defaults for the shell

# Source shell defaults
# $0 is the currently running program (this file)
this_file_directory=$(dirname $0)
relative_path_to_defaults=$this_file_directory/../shell_defaults

# if a file exists there, source it. otherwise complain
if test -f $relative_path_to_defaults; then
  # source and '.' are the same program
  source $relative_path_to_defaults
else
  echo -e "\033[31m\nFAILED TO SOURCE TEST RUNNING OPTIONS.\033[39m"
  echo -e "\033[31mTried $relative_path_to_defaults\033[39m"
  exit 1
fi


# ------------- Start Main
set +o xtrace
echo -e "$blue_text""This script pushes changes (somewhat pointlessly) to ""$default_text"
echo -e "$blue_text""airbyte's gh_pages branch\n""$default_text"
echo -e "$blue_text""It also actually deploys by copying those assets to""$default_text"
echo -e "$blue_text""the repo airbytehq/airbytehq.github.io\n\n""$default_text"


echo -e "$blue_text""Current path:""$default_text"
pwd


# Yarn check (which is commonly used to check for program existance)
if ! which -s yarn; then
  echo -e "$red_text""yarn not found HALP!!\n\n""$default_text"
  exit 1
fi

set -o xtrace

cd docusaurus
pwd

# install packages
yarn install

# generate static content
yarn build

# write a prod website to airbytehq/airbyte gh_pages branch
yarn deploy


# Git makes more sense from /
cd ..
pwd

# We should be here but we are playing with fire
git checkout gh-pages
git pull

# adding another remote seems less gross then double cloning to force push
git remote add org_level_gh_pages_repo git@github.com:airbytehq/airbytehq.github.io.git

exit 0
git push org_level_gh_pages_repo/gh_pages

